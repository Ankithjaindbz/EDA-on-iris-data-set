# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gm-pqIH08nsVxtclNd7zuhF-IR6jGQvV
"""

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


import statistics
df = sns.load_dataset('iris')

df.info()

np.unique(df['species'])

df['species'].nbytes

df['species'].astype('category').nbytes

df.shape

df.insert(5,"sepal_class","")

"""for loop

"""

for i in range(0,len(df['sepal_length'])):
  if (df['sepal_length'][i] < 5):
      df['sepal_class'][i] = "low"
  elif (df['sepal_length'][i] > 5.9):
         df['sepal_class'][i] = "high"
  else:
     df['sepal_class'][i] = "medium"

df.head(150)

"""while **loop**"""

i=0
while i < len(df['sepal_length']):
  if (df['sepal_length'][i] < 5):
      df['sepal_class'][i] = "low"
  elif (df['sepal_length'][i] > 5.9):
         df['sepal_class'][i] = "high"
  else:
     df['sepal_class'][i] = "medium"
  i=i+1

df.head()

df['sepal_class'].value_counts()

df.insert(5,"in_m",0)

"""**function**"""

def fil(x):
  y = x/100
  return y
df['in_m']=fil(df['petal_width'])
df['in_m']=round(df['in_m'],1)

df['in_m']=fil(df['petal_width'])
df['in_m']=round(df['in_m'],3)

df.head()

df.insert(6,"ratio",0)

def fil(x,z):
  y = x/10
  ratio = (((x/z))*100)
  return [y, ratio]
df['in_m'],df['ratio']=fil(df['petal_width'],df['sepal_width'])

df.head()

"""**Exploratory data analysis**
frequency table
"""

pd.crosstab(index=df['species'],columns="count")

"""two-way tables"""

pd.crosstab(index=df['species'],columns="sepal_length")

dataset = pd.read_csv("/content/wholesale-trade-survey-sep-2023-quarter-csv.csv")

dataset.head()

pd.crosstab(index=dataset['Group'],columns="Data_value")

"""**JOINT PROBABILITY**"""

pd.crosstab(index=dataset['Group'],columns="Data_value", normalize = True)

"""**MARGINAL PROBABILITY**"""

pd.crosstab(index=dataset['Group'],columns="Data_value", normalize = True, margins = True)

"""**conditional probability**"""

pd.crosstab(index=dataset['Group'],columns="Data_value", normalize = 'index', margins = True)

pd.crosstab(index=dataset['Group'],columns="Data_value", normalize = 'columns', margins = True)

"""data visualization"""

df.head(150)

"""scatter plot"""

plt.scatter(df['petal_length'],df['sepal_length'], c="blue")
plt.title("scatter plot of sepal and petal length")
plt.xlabel('sepal')
plt.ylabel("petal")

"""histogram plot"""

plt.hist(df['sepal_length'], edgecolor ='black',bins=15)
plt.title("scatter plot of sepal and petal length")
plt.xlabel('sepal')
plt.ylabel("petal")

"""bar plot"""

species_counts = df['species'].value_counts()

plt.bar(species_counts.index, species_counts.values, color=["red","blue","green"])

"""gpt"""

import matplotlib.pyplot as plt
import seaborn as sns

# Load the Iris dataset
iris = sns.load_dataset('iris')

# Count the occurrences of each species
species_counts = iris['species'].value_counts()

# Create a bar plot
plt.figure(figsize=(8, 6))
sns.barplot(x=species_counts.index, y=species_counts.values, palette='viridis')

# Add labels and title
plt.xlabel('Species')
plt.ylabel('Count')
plt.title('Count of Iris Species')

# Show the plot
plt.show()

"""seaborn
scatter plot
"""

sns.set(style="darkgrid")
sns.regplot(x=df['petal_width'], y=df['sepal_width'])

"""SCATTER PLOT .IMPLOT"""

sns.lmplot(x='petal_width', y='sepal_width',data = df , fit_reg=False,  hue="species", legend=True, palette="Set1")

"""histogram seaborn"""

sns.histplot(df['petal_length'], kde=True, bins=15)

"""barplot"""

sns.barplot(df['species'])

sns.countplot(x="species", data=df)

"""grouped barplot"""

sns.countplot(x="species", data=df, hue = "sepal_length")

"""box and whiskers plot"""

sns.boxplot(y=df["sepal_length"])

"""grouped blox plot"""

sns.boxplot(x=df['species'],y=df["sepal_length"], hue="petal_width", data = df)

"""box-whiskes plot  and histogram"""

f,(ax_box, ax_hist)=plt.subplots(2, gridspec_kw={"height_ratios": (.25, .75)})
sns.boxplot(df["sepal_length"] , ax=ax_box)
sns.histplot(df['petal_length'], ax=ax_hist, kde=True)

f,(ax_box, ax_hist)=plt.subplots(2, gridspec_kw={"height_ratios": (.25, .75)})
sns.barplot(df['species'] , ax=ax_box)
sns.histplot(df['petal_length'], ax=ax_hist, kde=True)

f,(ax_box, ax_hist)=plt.subplots(2, gridspec_kw={"height_ratios": (.50, .50)})
sns.barplot(df['species'] , ax=ax_hist)
sns.histplot(df['petal_length'], ax=ax_box, kde=True)

"""pair wise plot"""

sns.pairplot(df, kind="scatter" ,hue="species")

"""dealing with missing data"""

cf= pd.read_csv('/content/flavors_of_cocoa.csv', index_col=0, na_values=["??","????"])

cf2 = cf.copy()
cf3 = cf2.copy()
cf2.isna().sum()

missing = cf2[cf2.isnull().any(axis=1)]
print(missing)

"""statistical summary of data"""

cf2.describe()

cf["Review Date"].mean()

"""replace all the missing valu with mean"""

cf2["Review Date"].fillna(cf["Review Date"].mean(),inplace=True)

"""replace all the missing valu with median"""

cf2["Review Date"].fillna(cf["Review Date"].median(),inplace=True)

cf2.isna().sum()

"""for missing value in characters or catagorical data"""

cf2["Company Location"].value_counts().index[0]

cf2["Company Location"].fillna(cf2["Company Location"].value_counts().index[0], inplace = True)

"""USING MODE"""

cf2["Rating"].mode()

cf2["Rating"].fillna(cf2["Rating"].mode()[0], inplace = True)

print(df['species'].isna().sum())

df.fillna('setosa')

df['species'] = df['species'].map({'setosa': 0, 'versicolor': 1})
print(df['species'])

new_data=pd.get_dummies(df, drop_first=True)

df.head()